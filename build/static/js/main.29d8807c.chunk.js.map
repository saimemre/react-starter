{"version":3,"sources":["assets/images/loginBg.png","helpers/PublicRoute.js","utils/axios.js","selectors/authSelectors.js","selectors/playerSelectors.js","pages/Header.js","pages/Sidebar.js","constants/actionTypes.js","pages/Login.js","actions/authActions.js","pages/PlayerList.js","actions/playerActions.js","App.js","serviceWorker.js","reducers/authReducer.js","reducers/playerReducer.js","reducers/index.js","constants/endPoints.js","api/auth/requestLogin.js","sagas/authSaga.js","api/player/getPlayers.js","api/player/getPlayerDetail.js","sagas/playerSaga.js","sagas/index.js","config/store.js","index.js"],"names":["module","exports","__webpack_require__","p","PublicRoute","_ref","Component","component","rest","Object","objectWithoutProperties","react_default","a","createElement","Route","assign","render","props","localStorage","getItem","Redirect","to","pathname","state","from","location","instance","axios","create","baseURL","timeout","defaults","interceptors","request","use","config","console","log","error","Promise","reject","response","auth","getUserInfo","createSelector","profileInformation","get","I","Map","player","getPlayers","playerState","List","Header","getIn","this","toJS","class","id","href","data-toggle","src","alt","title","defaultProps","connect","Sidebar","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","REGISTER_SUCCESS","LOGOUT_SUCCESS","GET_ALL_PLAYERS_REQUEST","GET_ALL_PLAYERS_SUCCESS","GET_ALL_PLAYERS_FAILURE","GET_PLAYER_DETAIL_REQUEST","GET_PLAYER_DETAIL_SUCCESS","GET_PLAYER_DETAIL_FAILURE","Login","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","login","bind","assertThisInitialized","email","React","createRef","password","current","value","loginRequest","isFilled","style","authStyle","logoStyle","type","placeholder","ref","name","checked","for","onClick","width","height","backgroundImage","concat","mapDispatchToProps","payload","PlayerList","getAllPlayers","playersData","players","Sidebar_Sidebar","pages_Header","map","index","levelColor","level","scope","idName","kingsTower","range","damage","hitSpeed","Link","search","_id","fromDashboard","AppRouter","BrowserRouter","Switch","helpers_PublicRoute","path","Boolean","window","hostname","match","initialState","fromJS","playerInfo","selectedPlayer","total","combineReducers","arguments","length","undefined","action","merge","list","mergeIn","update","seenPlayerList","push","endPoints","LOGIN","LOGOUT","CREATE_PLAYER","GET_ALL_PLAYERS","GET_PLAYER_DETAIL","requestLogin","user","data","method","headers","Accept","Content-Type","requestSignIn","_action$payload","credentials","_error$response$data","regenerator_default","wrap","_context","prev","next","sent","put","token","common","Authorization","setItem","t0","status","reason","stop","_marked","authSaga","takeLatest","getPlayerDetail","fetchPlayers","fetchPlayerDetail","playerSaga_marked","_context2","_marked2","playerSaga","rootSaga","all","toConsumableArray","sagas_marked","persistConfig","transforms","immutableTransform","key","storage","whitelist","persistedReducer","persistReducer","reducer","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","logger","persistor","persistStore","run","ReactDOM","react_redux_es","integration_react","loading","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.29d8807c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loginBg.3d037cd1.png\";","import React from \"react\";\nimport { Redirect, Route } from 'react-router-dom';\n\nconst PublicRoute = ({ component: Component, ...rest })  => {\n    return (\n      <Route\n        {...rest}\n        render={props =>\n          localStorage.getItem(\"authToken\") ? (\n            <Redirect\n              to={{\n                pathname: \"/\",\n                state: { from: props.location }\n              }}\n            />\n          ) : (\n            <Component {...props} />\n          )\n        }\n      />\n    );\n  }\n\n\nexport default PublicRoute","import axios from 'axios';\n\nconst baseURL = 'http://www.clashapi.xyz/api/'; // prod\nconst timeout = 10000;\n\nconst instance = axios.create({\n  baseURL,\n  timeout\n});\n\n//instance.defaults.headers.common.Authorization = 'Bearer';\n//instance.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\ninstance.defaults.timeout = timeout;\n\n// Interceptor example for refresh token logic\n\ninstance.interceptors.request.use(\n  (config) => {\n    console.log(config);\n    return config;\n  },\n  error => Promise.reject(error)\n  ,\n);\n\n// RESPONSE INTERCEPTOR\ninstance.interceptors.response.use(\n  response => response,\n  (error) => {\n    // Do something with request error\n    const originalRequest = error.config;\n\n    // If response exist (request not time out)\n    if (error.response) {\n      console.log(error.response);\n    }\n\n    return Promise.reject(error);\n  },\n);\n\nexport default instance;\n\nexport function setToken(token) {\n  instance.defaults.headers.common.Authorization = `Bearer ${token}`;\n}\n","import { createSelector } from 'reselect';\nimport I from 'immutable';\n\nconst auth = state => state.auth;\nconsole.log(\"adasd\");\nconsole.log(auth);\nexport const getUserInfo = createSelector(auth, profileInformation => profileInformation.get('auth', I.Map()));","import { createSelector } from 'reselect';\nimport I from 'immutable';\n\nconst player = state => state.player;\n\nexport const getPlayers = createSelector(player, playerState => playerState.get('players', I.List()));\nexport const getSelectedPlayer = createSelector(player, playerState => playerState.getIn(['selectedPlayer', -1], I.Map()));","import React, { Component } from 'react';\n\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport I from 'immutable';\n\nimport {\n    getUserInfo\n} from '../selectors';\n\n\nclass Header extends Component {\n    render(){\n        const { auth } = this.props;\n        console.log(auth.toJS());\n        return (\n            <header class=\"navbar pcoded-header navbar-expand-lg navbar-light\">\n                <div class=\"m-header\">\n                    <a class=\"mobile-menu\" id=\"mobile-collapse1\" href=\"#!\"><span></span></a>\n                    <a href=\"index.html\" class=\"b-brand\">\n                    <div class=\"b-bg\">\n                        <i class=\"feather icon-trending-up\"></i>\n                    </div>\n                    <span class=\"b-title\">Clash Royal Api Example</span>\n                </a>\n                </div>\n                <a class=\"mobile-menu\" id=\"mobile-header\" href=\"#!\">\n                    <i class=\"feather icon-more-horizontal\"></i>\n                </a>\n                <div class=\"collapse navbar-collapse\">\n                    <ul class=\"navbar-nav ml-auto\">\n                        <li>\n                            <div class=\"dropdown drp-user\">\n                                <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\">\n                                    <i class=\"icon feather icon-settings\"></i>\n                                </a>\n                                <div class=\"dropdown-menu dropdown-menu-right profile-notification\">\n                                    <div class=\"pro-head\">\n                                        <img src=\"assets/images/user/avatar-1.jpg\" class=\"img-radius\" alt=\"User-Profile-Image\" />\n                                        <span>John Doe</span>\n                                        <a href=\"auth-signin.html\" class=\"dud-logout\" title=\"Logout\">\n                                            <i class=\"feather icon-log-out\"></i>\n                                        </a>\n                                    </div>\n                                    <ul class=\"pro-body\">\n                                        <li><a href=\"#!\" class=\"dropdown-item\"><i class=\"feather icon-settings\"></i> Ayarlar</a></li>\n                                        <li><a href=\"#!\" class=\"dropdown-item\"><i class=\"feather icon-user\"></i> Profil</a></li>\n                                    </ul>\n                                </div>\n                            </div>\n                        </li>\n                    </ul>\n                </div>\n            </header>\n        )\n    }\n}\n\nHeader.propTypes = {\n    \n};\n\nHeader.defaultProps = {\n\n};\n\nconst mapStateToProps = state => ({\n    auth: getUserInfo(state)\n});\n\n\nconst mapDispatchToProps = {\n    \n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\n\nexport default class Sidebar extends Component {\n    render(){\n        return (\n            <nav class=\"pcoded-navbar\">\n                <div class=\"navbar-wrapper\">\n                    <div class=\"navbar-brand header-logo\">\n                        \n                    </div>\n                    <div class=\"navbar-content scroll-div\">\n                        \n                    </div>\n                </div>\n            </nav>\n        )\n    }\n}","// auth actions\nexport const LOGIN_REQUEST = 'LOGIN_REQUEST';\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_FAILURE = 'LOGIN_FAILURE';\n\nexport const REGISTER_REQUEST = 'REGISTER_REQUEST';\nexport const REGISTER_SUCCESS = 'REGISTER_SUCCESS';\nexport const REGISTER_FAILURE = 'REGISTER_FAILURE';\n\nexport const LOGOUT_REQUEST = 'LOGOUT_REQUEST';\nexport const LOGOUT_SUCCESS = 'LOGOUT_SUCCESS';\nexport const LOGOUT_FAILURE = 'LOGOUT_FAILURE';\n\nexport const FORGOT_PASSWORD_REQUEST = 'FORGOT_PASSWORD_REQUEST';\nexport const FORGOT_PASSWORD_SUCCESS = 'FORGOT_PASSWORD_SUCCESS';\nexport const FORGOT_PASSWORD_FAILURE = 'FORGOT_PASSWORD_FAILURE';\n\nexport const UPDATE_PASSWORD_REQUEST = 'UPDATE_PASSWORD_REQUEST';\nexport const UPDATE_PASSWORD_SUCCESS = 'UPDATE_PASSWORD_SUCCESS';\nexport const UPDATE_PASSWORD_FAILURE = 'UPDATE_PASSWORD_FAILURE';\n\n\n// player actions\n\nexport const GET_ALL_PLAYERS_REQUEST = 'GET_ALL_PLAYERS_REQUEST';\nexport const GET_ALL_PLAYERS_SUCCESS = 'GET_ALL_PLAYERS_SUCCESS';\nexport const GET_ALL_PLAYERS_FAILURE = 'GET_ALL_PLAYERS_FAILURE';\n\nexport const GET_PLAYER_DETAIL_REQUEST = 'GET_PLAYER_DETAIL_REQUEST';\nexport const GET_PLAYER_DETAIL_SUCCESS = 'GET_PLAYER_DETAIL_SUCCESS';\nexport const GET_PLAYER_DETAIL_FAILURE = 'GET_PLAYER_DETAIL_FAILURE';","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { loginRequest as loginRequestAction } from '../actions';\n\nimport backgroundImage from '../assets/images/loginBg.png';\n\nclass Login extends Component {\n\n    constructor(props) {\n        super(props);\n    \n        this.login = this.login.bind(this);\n    \n        this.email = React.createRef();\n        this.password = React.createRef();\n        \n    }\n\n    isFilled() {\n        return this.email.current.value !== '' && this.password.current.value !== '';\n    }\n\n    login() {\n        const { loginRequest } = this.props;\n        \n        const email = this.email.current.value;\n        const password = this.password.current.value;\n        \n        if (this.isFilled) {\n          loginRequest(email, password);\n        }\n        \n      }\n\n\n    render(){\n        \n        return (\n            <div class=\"auth-wrapper aut-bg-img\" style={authStyle}>\n                <div class=\"auth-content\">\n                    <div class=\"text-white\">\n                        <div class=\"card-body text-center\">\n                            <div class=\"mb-4\">\n                                <image style={logoStyle} />\n                            </div>\n                            <h3 class=\"mb-4 text-white\">Giriş Yap</h3>\n                            <div class=\"input-group mb-3\">\n                                <input type=\"email\" class=\"form-control\" placeholder=\"Email\" ref={this.email} />\n                            </div>\n                            <div class=\"input-group mb-4\">\n                                <input type=\"password\" class=\"form-control\" placeholder=\"password\" ref={this.password} />\n                            </div>\n                            <div class=\"form-group text-left\">\n                                <div class=\"checkbox checkbox-fill d-inline\">\n                                    <input type=\"checkbox\" name=\"checkbox-fill-1\" id=\"checkbox-fill-a1\" checked=\"\" />\n                                    <label for=\"checkbox-fill-a1\" class=\"cr\"> Save credentials</label>\n                                </div>\n                            </div>\n                            <button class=\"btn btn-success shadow-2 mb-4\" onClick={this.login}>Giriş Yap</button>\n                            <p class=\"mb-2 text-muted\"><a class=\"text-white\" href=\"auth-reset-password-v3.html\">Şifremi unuttum.</a></p>\n                            <p class=\"mb-0 text-muted\"> <a class=\"text-white\" href=\"auth-signup-v3.html\">Hesbaınız yok mu? Kayıt olun.</a></p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nvar authStyle = {\n    width: \"100%\",\n    height: \"100%\",\n    backgroundImage: `url(${backgroundImage})`\n};\n\nvar logoStyle = {\n    width: \"300\",\n    height: \"100\"\n};\n\n\nLogin.propTypes = {\n    navigation: PropTypes.shape({\n      push: PropTypes.func.isRequired\n    }).isRequired\n};\n  \nLogin.defaultProps = {\n  \n};\n  \nconst mapDispatchToProps = {\n    loginRequest: loginRequestAction\n};\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import {\n    LOGIN_REQUEST, REGISTER_REQUEST, \n    FORGOT_PASSWORD_REQUEST,\n    UPDATE_PASSWORD_REQUEST\n  } from '../constants/actionTypes';\n  \n  export function loginRequest(email, password) {\n    return {\n      type: LOGIN_REQUEST,\n      payload: {\n        email,\n        password\n      }\n    };\n  }\n  \n  export function registerRequest(email, firstname, lastname, password) {\n    return {\n      type: REGISTER_REQUEST,\n      payload: {\n        email,\n        firstname,\n        lastname,\n        password\n      }\n    };\n  }\n  \n  export function forgotPassword(email) {\n    return {\n      type: FORGOT_PASSWORD_REQUEST,\n      payload: {\n        email\n      }\n    };\n  }\n  \n  export function updatePassword(oldPassword, newPassword, newPasswordAgain) {\n    return {\n      type: UPDATE_PASSWORD_REQUEST,\n      payload: {\n        oldPassword,\n        newPassword,\n        newPasswordAgain\n      }\n    };\n  }\n  ","import React, { Component } from 'react';\n\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\nimport I from 'immutable';\n\nimport { getAllPlayers as getAllPlayersAction } from '../actions';\nimport {\n    getPlayers\n  } from '../selectors';\n\nimport Header from '../pages/Header';\nimport Sidebar from '../pages/Sidebar';\n\nimport strings from '../constants/strings';\n\nclass PlayerList extends Component {\n\n    constructor(props) {\n        super(props);\n    }\n    componentWillMount() {\n        const { getAllPlayers } = this.props;\n        getAllPlayers();\n    }\n\n\n    render(){\n\n        const { players } = this.props;\n        const playersData = players.toJS();\n        console.log(playersData)\n        return (\n            <div>\n                <Sidebar />\n                <Header />\n                <section class=\"pcoded-main-container\">\n                    <div class=\"pcoded-wrapper\">\n                        <div class=\"pcoded-content\">\n                            <div class=\"pcoded-inner-content\">\n                                \n                                <div class=\"main-body\">\n                                    <div class=\"page-wrapper\">\n                                        \n                                        <div class=\"row\">\n                                        \n                                            <div class=\"col-xl-12\">\n                                                <div class=\"card\">\n                                                \n                                                    <div class=\"card-header\">\n                                                        <h5>OYUNCULAR</h5>\n                                                    </div>\n                                                    <div class=\"\">\n                                                        <div class=\"table-responsive\">\n                                                            <table class=\"table table-hover\">\n                                                                <thead class=\"thead-portfoy\">\n                                                                    <tr>\n                                                                        <th>#</th>\n                                                                        <th>İsim</th>\n                                                                        <th>Seviye</th>\n                                                                        <th>Menzil</th>\n                                                                        <th>Hasar</th>\n                                                                        <th>Vuruş Hızı</th>\n                                                                        <th></th>\n                                                                    </tr>\n                                                                </thead>\n                                                                <tbody class=\"tbody-portfoy\">\n                                                                {\n                                                                    playersData.map((player,index) => {\n                                                                        const levelColor = (player.level > 3) ? 'text-danger': 'text-success';\n                                                                        return (\n                                                                            <tr>\n                                                                                <th scope=\"row\"><button type=\"button\" class=\"btn btn-success btn-portfoy-big shadow\">{index}</button></th>\n                                                                                <td>{player.idName}</td>\n                                                                                <td><p class={levelColor}>{player.level}</p></td>\n                                                                                <td>{player.kingsTower.range}</td>\n                                                                                <td>{player.kingsTower.damage}</td>\n                                                                                <td>{player.kingsTower.hitSpeed}</td>\n                                                                                <td><Link to={{\n                                                                                    pathname: \"/player-detail\",\n                                                                                    search: \"?id=\"+player._id,\n                                                                                    state: { fromDashboard: true }\n                                                                                  }}><button type=\"button\" class=\"btn btn-rounded btn-success btn-portfoy shadow\">></button></Link></td>\n                                                                            </tr>\n                                                                        )\n                                                                    })\n                                                                }\n                                                                </tbody>\n                                                            </table>\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            \n                                            \n                                        </div>\n                                        \n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </section>    \n            </div>\n        )\n    }\n}\n\n\n\n\nPlayerList.propTypes = {\n    getAllInvestors: PropTypes.func.isRequired,\n};\n\nPlayerList.defaultProps = {\n\n};\n\nconst mapStateToProps = state => ({\n    players: getPlayers(state)\n});\n\n\nconst mapDispatchToProps = {\n    getAllPlayers: getAllPlayersAction\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PlayerList);","import {\n GET_ALL_PLAYERS_REQUEST, GET_PLAYER_DETAIL_REQUEST\n} from '../constants/actionTypes';\n\n\nexport function getAllPlayers() {\n  return {\n    type: GET_ALL_PLAYERS_REQUEST\n  };\n}\n\nexport function getPlayerDetail(id) {\n  return {\n    type: GET_PLAYER_DETAIL_REQUEST,\n    payload: {\n      id\n    }\n  };\n}","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\nimport {  PrivateRoute, PublicRoute } from \"./helpers\";\n\nimport { setToken } from './utils/axios';\n\nimport Header from './pages/Header';\nimport Sidebar from './pages/Sidebar';\nimport Login from './pages/Login';\nimport PlayerList from './pages/PlayerList';\n\nconst AppRouter = () => (\n  <Router>\n    <div>\n      \n      <Switch>\n        <PublicRoute path=\"/\" component={PlayerList} />\n      </Switch>\n    </div>\n  </Router>\n);\n\nexport default AppRouter;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import I from 'immutable';\nimport { LOGIN_SUCCESS, REGISTER_SUCCESS, LOGOUT_SUCCESS } from '../constants/actionTypes';\n\n\nconst initialState = I.fromJS({\n  auth: {}\n});\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case LOGIN_SUCCESS:\n    case REGISTER_SUCCESS: {\n      return state.merge(I.fromJS(action.payload.auth));\n    }\n    case LOGOUT_SUCCESS:\n    default: return state;\n  }\n}\n","import I from 'immutable';\nimport { GET_ALL_PLAYERS_SUCCESS, GET_PLAYER_DETAIL_SUCCESS } from '../constants/actionTypes';\n\nconst initialState = I.fromJS({\n  playerInfo: {},\n  players: [],\n  selectedPlayer: [],\n  total: 0\n});\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case GET_ALL_PLAYERS_SUCCESS: {\n      \n      const list = action.payload.players;\n      \n      \n      return state.mergeIn(['players'], I.fromJS(list));\n    }\n    case GET_PLAYER_DETAIL_SUCCESS: {\n      return state.update('selectedPlayer', seenPlayerList => seenPlayerList.push(I.fromJS(action.payload.selectedPlayer)));\n    }\n    default: return state;\n  }\n}","import { combineReducers } from 'redux';\nimport auth from './authReducer';\nimport player from './playerReducer';\n\nexport default combineReducers({\n  auth,\n  player\n});","export default {\n    // auth\n    LOGIN: 'login',\n    LOGOUT: 'logout',\n\n    // player\n    CREATE_PLAYER: 'player',\n    GET_ALL_PLAYERS: 'players',\n    GET_PLAYER_DETAIL: id => `player/${id}`\n  };\n  ","import axios from '../../utils/axios';\nimport endPoints from '../../constants/endPoints';\n\nexport default function requestLogin(user) {\n  const data = {\n    email: user['email'],\n    password: user['password']\n  }\n  return axios(endPoints.LOGIN, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    data\n  });\n}\n","import {\n    put, call, takeLatest\n  } from 'redux-saga/effects';\n  \n  import {\n    LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAILURE,\n    REGISTER_REQUEST, REGISTER_SUCCESS, REGISTER_FAILURE,\n    LOGOUT_REQUEST, LOGOUT_SUCCESS, LOGOUT_FAILURE\n  } from '../constants/actionTypes';\n  import {\n    requestLogin\n  } from '../api/auth';\n  \n  import { setToken } from '../utils/axios';\n  \n  function* requestSignIn(action) {\n    try {\n      const { email, password } = action.payload;\n      const credentials = yield call(requestLogin, { email, password });\n      const { data } = credentials;\n\n      yield put({ type: LOGIN_SUCCESS, payload: { auth: data } });\n      \n      setToken(data.token);\n      localStorage.setItem('authToken', data.token)\n\n    } catch (error) {\n      const { data: { status, reason } } = error.response;\n\n      yield put({ type: LOGIN_FAILURE });\n    }\n  }\n  \n  /*\n  function* requestSignUp(action) {\n    try {\n      const {\n        email, firstname, lastname, password\n      } = action.payload;\n      const credentials = yield call(requestRegister, {\n        email, firstname, lastname, password\n      });\n      const { data } = credentials;\n  \n      yield put({ type: REGISTER_SUCCESS, payload: { auth: data } });\n    } catch (error) {\n      yield put({ type: REGISTER_FAILURE });\n    }\n  }\n  */\n\n  /*\n  function* requestSignOut() {\n    try {\n      yield call(requestLogout);\n      yield put({ type: LOGOUT_SUCCESS });\n    } catch (error) {\n      yield put({ type: LOGOUT_FAILURE });\n    }\n  }\n  */\n  \n  const authSaga = [\n    takeLatest(LOGIN_REQUEST, requestSignIn)\n  ];\n  \n  export default authSaga;\n  ","import axios from '../../utils/axios';\nimport endPoints from '../../constants/endPoints';\n\nexport default function getPlayers() {\n  return axios(endPoints.GET_ALL_PLAYERS, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }\n  });\n}\n","import axios from '../../utils/axios';\nimport endPoints from '../../constants/endPoints';\n\nexport default function getPlayerDetail(id) {\n  return axios(endPoints.GET_PLAYER_DETAIL(id), {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }\n  });\n}\n","import {\n    put, call, takeLatest\n  } from 'redux-saga/effects';\n  \n  import {\n    GET_ALL_PLAYERS_REQUEST, GET_ALL_PLAYERS_SUCCESS, GET_ALL_PLAYERS_FAILURE, GET_PLAYER_DETAIL_SUCCESS, GET_PLAYER_DETAIL_FAILURE, GET_PLAYER_DETAIL_REQUEST\n  } from '../constants/actionTypes';\n  import {\n    requestCreate, getPlayers, getPlayerDetail\n  } from '../api/player';\n  \n\nfunction* fetchPlayers() {\n  try {\n    const players = yield call(getPlayers);\n    const { status, data } = players;\n    console.log(data);\n    if (status === 200) {\n      yield put({ type: GET_ALL_PLAYERS_SUCCESS, payload: { players: data } });\n    } else {\n      yield put({ type: GET_ALL_PLAYERS_FAILURE });\n    }\n  } catch (error) {\n    console.log(error)\n    yield put({ type: GET_ALL_PLAYERS_FAILURE });\n  }\n}\n\nfunction* fetchPlayerDetail(action) {\n  try {\n    const player = yield call(getPlayerDetail, action.payload.id);\n    \n    const { status, data } = player;\n    if (status === 200) {\n      yield put({ type: GET_PLAYER_DETAIL_SUCCESS, payload: { selectedPlayer: data } });\n    } else {\n      yield put({ type: GET_PLAYER_DETAIL_FAILURE });\n    }\n  } catch (error) {\n    yield put({ type: GET_PLAYER_DETAIL_FAILURE });\n  }\n}\n  \n  \nconst playerSaga = [\n  takeLatest(GET_ALL_PLAYERS_REQUEST, fetchPlayers),\n  takeLatest(GET_PLAYER_DETAIL_REQUEST, fetchPlayerDetail)\n];\n\nexport default playerSaga;\n  ","import { all } from 'redux-saga/effects';\n\nimport auth from './authSaga';\nimport playerSaga from './playerSaga';\n\nexport default function* rootSaga() {\n  yield all([\n    ...auth,\n    ...playerSaga\n  ]);\n}\n","import createSagaMiddleware from 'redux-saga';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport immutableTransform from 'redux-persist-transform-immutable';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport { logger } from 'redux-logger';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas';\n\nconst persistConfig = {\n    transforms: [immutableTransform()],\n    key: 'root',\n    storage,\n    whitelist: ['auth']\n};\n\nconst persistedReducer = persistReducer(persistConfig, reducer);\n\n\n\n// create the saga middleware\nconst sagaMiddleware = createSagaMiddleware();\n// mount it on the Store\nconst store = createStore(persistedReducer,\n  applyMiddleware(sagaMiddleware, logger));\n\nconst persistor = persistStore(store);\n\n// then run the saga\nsagaMiddleware.run(rootSaga);\n\n// render the application\nexport { store, persistor };\n","import React from 'react';\nimport createSagaMiddleware from 'redux-saga';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport immutableTransform from 'redux-persist-transform-immutable';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reducer from './reducers';\nimport rootSaga from './sagas';\n\nimport { store, persistor } from './config/store';\n\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <PersistGate loading={null} persistor={persistor}>\n                <App />\n            </PersistGate>\n        </Provider>\n    </BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}